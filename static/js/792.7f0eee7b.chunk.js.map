{"version":3,"file":"static/js/792.7f0eee7b.chunk.js","mappings":"oLAgBA,I,SCLA,MAVA,SAAqBA,EAAOC,GACxB,IAAAC,GAA4CC,EAAAA,EAAAA,UAASH,GAAMI,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAOxC,OANAI,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQC,YAAW,kBAAMH,EAAkBP,EAAM,GAAEC,GAAS,KAClE,OAAO,WACHU,aAAaF,EACjB,CACJ,GAAG,CAACT,EAAOC,IACJK,CACX,ECToD,qBAAXM,OAAyBC,EAAAA,gBAAkBL,EAAAA,S","sources":["../node_modules/usehooks-ts/dist/esm/useDarkMode/useDarkMode.js","../node_modules/usehooks-ts/dist/esm/useDebounce/useDebounce.js","../node_modules/usehooks-ts/dist/esm/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.js"],"sourcesContent":["import { useLocalStorage, useMediaQuery, useUpdateEffect } from '..';\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\nfunction useDarkMode(defaultValue) {\n    var _a;\n    const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n    const [isDarkMode, setDarkMode] = useLocalStorage('usehooks-ts-dark-mode', (_a = defaultValue !== null && defaultValue !== void 0 ? defaultValue : isDarkOS) !== null && _a !== void 0 ? _a : false);\n    useUpdateEffect(() => {\n        setDarkMode(isDarkOS);\n    }, [isDarkOS]);\n    return {\n        isDarkMode,\n        toggle: () => setDarkMode(prev => !prev),\n        enable: () => setDarkMode(true),\n        disable: () => setDarkMode(false),\n    };\n}\nexport default useDarkMode;\n","import { useEffect, useState } from 'react';\nfunction useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [value, delay]);\n    return debouncedValue;\n}\nexport default useDebounce;\n","import { useEffect, useLayoutEffect } from 'react';\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n"],"names":["value","delay","_useState","useState","_useState2","_slicedToArray","debouncedValue","setDebouncedValue","useEffect","timer","setTimeout","clearTimeout","window","useLayoutEffect"],"sourceRoot":""}